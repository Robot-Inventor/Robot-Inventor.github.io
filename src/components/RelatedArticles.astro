---
import RecommendedArticles from "./RecommendedArticles.astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import { getEntry } from "astro:content";
import { getLatestArticles } from "src/utils/getLatestArticles";

const NUMBER_OF_RELATED_ARTICLES = 5;

interface Props {
    targetArticleSlug: CollectionEntry<"article">["slug"];
}

const targetArticle = await getEntry("article", Astro.props.targetArticleSlug);
const targetarticleTags = (targetArticle.data.tags || []).map((tag) => tag.id);

const sortRelatedArticles = (a: CollectionEntry<"article">, b: CollectionEntry<"article">) => {
    const tagSort =
        (b.data.tags || []).filter((tag) => targetarticleTags.includes(tag.id)).length -
        (a.data.tags || []).filter((tag) => targetarticleTags.includes(tag.id)).length;
    if (tagSort !== 0) return tagSort;
    return new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime();
};

/**
 * 関連記事を取得する。
 * 1. 同じタグの記事を取得し、現在の記事とのタグの重複数が多い順に並べる
 * 2. タグの重複数が同じ場合は、投稿日が新しい順に並べる
 * 3. 同じタグの記事が足りない場合は、最新の記事で補う
 */
const relatedArticleCollection = (
    await getCollection("article", (article) => {
        if (article.slug == Astro.props.targetArticleSlug || !article.data.tags) return false;
        return article.data.tags.some((tag) => targetarticleTags.includes(tag.id));
    })
)
    .sort(sortRelatedArticles)
    .slice(0, NUMBER_OF_RELATED_ARTICLES);

const latestArticles = await getLatestArticles(NUMBER_OF_RELATED_ARTICLES, [Astro.props.targetArticleSlug]);

const relatedArticles = [
    ...relatedArticleCollection,
    ...latestArticles.slice(0, Math.max(0, NUMBER_OF_RELATED_ARTICLES - relatedArticleCollection.length))
];
---

<RecommendedArticles header="関連記事" articles={relatedArticles} />
