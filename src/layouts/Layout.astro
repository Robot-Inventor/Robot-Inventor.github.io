---
import "./Layout.css";
import BaseLayout from "./BaseLayout.astro";
import "../starlight/integrations/asides.css";
import BreakingNewsBanner from "@components/BreakingNewsBanner.astro";
import AuthorInfo from "@components/AuthorInfo.astro";
import ShareButton from "@components/ShareButton.astro";
import FeaturedArticles from "@components/FeaturedArticles.astro";
import LatestArticles from "@components/LatestArticles.astro";
import RelatedArticles from "@components/RelatedArticles.astro";
import { Markdown } from "@astropub/md";

import { getEntry } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { cache } from "src/utils/cache";
import { escapeTitle, getAuthorData, getThumbnailData } from "src/utils/layoutUtil";

interface Props {
    frontmatter: CollectionEntry<"article">["data"];
    slug?: CollectionEntry<"article">["slug"];
}

if (!Astro.site) throw new Error("site is not defined");

const tagIds = Astro.props.frontmatter.tags ? Astro.props.frontmatter.tags.map((tag) => tag.id) : [];
const tags = (
    await Promise.all(tagIds.map((tagId) => cache(`tag-collection-${tagId}`, () => getEntry("tag", tagId))))
).sort((a, b) => {
    if (!a || !b) return 0;
    return a.data.name.localeCompare(b.data.name, "ja");
});

const author = await getAuthorData(Astro.props.frontmatter.author);

const titleWithSiteName = escapeTitle(`${Astro.props.frontmatter.title} - ${import.meta.env.SITE_NAME}`);

const thumbnailData =
    Astro.props.frontmatter.showThumbnail && Astro.props.frontmatter.thumbnail
        ? await getThumbnailData(Astro.props.frontmatter.thumbnail)
        : undefined;

const ISO8601ToLocale = (iso8601: string) => {
    return iso8601
        .replace("T", " ")
        .replace(/[\+\-]\d{2}:\d{2}/, "")
        .replace(/(\d{2,4})\-(\d{1,2})\-(\d{1,2})/, "$1年$2月$3日")
        .replace(/(\d{2}:\d{2}):\d{2}/, "$1")
        .replace(/\.\d+$/, "");
};
---

<BaseLayout frontmatter={Astro.props.frontmatter} lang={Astro.props.frontmatter.lang}>
    {Astro.props.frontmatter.showAds && <ins data-ad-code-slot="body" slot="beforeHeader" />}
    <Fragment slot="main">
        <article>
            {
                Astro.props.frontmatter.showRecommendedArticles &&
                    cache("breakingNewsBanner", () => (
                        <BreakingNewsBanner
                            title="【注目ニュース】OpenAI、人間のように思考するAI「OpenAI o1」を発表"
                            url="/article/2024/09/13/openai-announces-new-reasoning-model-series-openai-o1/"
                            type="info"
                        />
                    ))
            }
            {
                Astro.props.frontmatter.showAds && (
                    // ↓記事のトップに表示する広告。スマホ専用
                    <div id="top_ad_mobile">
                        <ins
                            class="adsbygoogle"
                            data-ad-client="ca-pub-2526648882773973"
                            data-ad-slot="1835222588"
                            data-ad-format="horizontal"
                            data-full-width-responsive="false"
                            style="height: 100px;"
                        />
                        <script is:inline>(adsbygoogle = window.adsbygoogle || []).push({});</script>
                    </div>
                )
            }
            <h1><Markdown.Inline of={Astro.props.frontmatter.title} /></h1>
            <div id="article_tags">
                {
                    !!tags.length &&
                        tags.map((tag) => {
                            if (!tag) return;
                            return <a href={`/tag/${tag.id}/`}>#{tag.data.name}</a>;
                        })
                }
            </div>
            <div id="article_info">
                {
                    Astro.props.frontmatter.showDate && (
                        <span>
                            投稿日：
                            <time datetime={Astro.props.frontmatter.pubDate}>
                                {ISO8601ToLocale(Astro.props.frontmatter.pubDate)}
                            </time>
                        </span>
                    )
                }
                {
                    Astro.props.frontmatter.showDate && Astro.props.frontmatter.modifiedDate && (
                        <span>
                            更新日：
                            <time datetime={Astro.props.frontmatter.modifiedDate}>
                                {ISO8601ToLocale(Astro.props.frontmatter.modifiedDate)}
                            </time>
                        </span>
                    )
                }
            </div>
            {
                thumbnailData && (
                    <figure id="page_top_thumbnail">
                        <picture id="">
                            {thumbnailData.sources.map((source) => {
                                return <source srcset={source.srcset} type={source.type} />;
                            })}
                            {
                                // Firefoxでは問題ないが、Chromeでレイアウトシフトが発生するのを防ぐため、img要素にstyle属性を追加
                            }
                            <img
                                src={thumbnailData.fallback.src}
                                alt="サムネイル"
                                loading="eager"
                                style="width: 100%; height: auto; max-height: none;"
                                {...thumbnailData.fallback.attributes}
                            />
                        </picture>
                        {Astro.props.frontmatter.thumbnailCaption && (
                            <figcaption>
                                <Markdown.Inline of={Astro.props.frontmatter.thumbnailCaption} />
                            </figcaption>
                        )}
                    </figure>
                )
            }
            <slot />
        </article>
        <ShareButton title={titleWithSiteName} url={Astro.url.href} />
        {Astro.props.frontmatter.showAuthor && cache(`authorInfo-${author.id}`, () => <AuthorInfo {author} />)}
        <div id="bottom_ad">
            <pubtag class="adsbypubpower" data-ad-slot="pw_41825"></pubtag>
            <script type="text/javascript" is:inline>
                (powerTag.Init = window.powerTag.Init || []).push(function () {
                    powerAPITag.initNativeAds("pw_41825");
                });
            </script>
        </div>
        {
            Astro.props.frontmatter.showRecommendedArticles && (
                <>
                    <section class="recommended_articles_section" id="related_articles_section">
                        {/* ↓関連記事の上に表示する広告。PC専用 */}
                        <ins
                            id="top_ad_desktop"
                            class="adsbygoogle"
                            data-ad-client="ca-pub-2526648882773973"
                            data-ad-slot="1755549071"
                            data-ad-format="rectangle, horizontal"
                            data-full-width-responsive="false"
                        />
                        <script is:inline>(adsbygoogle = window.adsbygoogle || []).push({});</script>
                        {Astro.props.slug && <RelatedArticles targetArticleSlug={Astro.props.slug} />}
                        <pubtag class="adsbypubpower" data-ad-slot="pw_41761" />
                        <script type="text/javascript" is:inline>
                            (powerTag.Init = window.powerTag.Init || []).push(function ()
                            {powerAPITag.display("pw_41761")})
                        </script>
                        {cache("featuredArticles", () => (
                            <FeaturedArticles />
                        ))}
                        <pubtag class="adsbypubpower" data-ad-slot="pw_41762" />
                        <script type="text/javascript" is:inline>
                            (powerTag.Init = window.powerTag.Init || []).push(function ()
                            {powerAPITag.display("pw_41762")})
                        </script>
                    </section>
                    {Astro.props.slug &&
                        cache("latestArticles", () => (
                            <section class="recommended_articles_section">
                                {/* @ts-expect-error */}
                                <LatestArticles currentPageSlug={Astro.props.slug} />
                            </section>
                        ))}
                </>
            )
        }
    </Fragment>
    <Fragment slot="beforeEnd">
        <script src="./Layout.ts"></script>
    </Fragment>
</BaseLayout>
