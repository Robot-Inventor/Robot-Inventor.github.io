---
import "./Layout.css";
import "../starlight/integrations/asides.css";
import BreakingNewsBanner from "@components/BreakingNewsBanner.astro";
import AuthorInfo from "@components/AuthorInfo.astro";
import ShareButton from "@components/ShareButton.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import FeaturedArticles from "@components/FeaturedArticles.astro";
import LatestArticles from "@components/LatestArticles.astro";
import RelatedArticles from "@components/RelatedArticles.astro";
import { Markdown } from "@astropub/md";

import { getEntry } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { getImage } from "astro:assets";
import { getDefaultThumbnail } from "src/utils/getDefaultThumbnailPath";
import { cache } from "src/utils/cache";

interface Props {
    frontmatter: CollectionEntry<"article">["data"];
    slug?: CollectionEntry<"article">["slug"];
}

declare global {
    interface Window {
        googletag: {
            [key: string]: any;
        };
    }

    const googletag: Window["googletag"];
}

if (!Astro.site) throw new Error("site is not defined");

let thumbnailUrl = new URL((await getDefaultThumbnail(Astro.url.pathname)).src, Astro.site.href).href;
if (Astro.props.frontmatter.thumbnail) {
    thumbnailUrl = new URL(Astro.props.frontmatter.thumbnail.src, Astro.site.href).href;
}

const tagIds = Astro.props.frontmatter.tags ? Astro.props.frontmatter.tags.map((tag) => tag.id) : [];
const tags = (await Promise.all(tagIds.map((tagId) => getEntry("tag", tagId)))).sort((a, b) => {
    if (!a || !b) return 0;
    return a.data.name.localeCompare(b.data.name, "ja");
});

const authorId =
    typeof Astro.props.frontmatter.author === "string"
        ? Astro.props.frontmatter.author
        : Astro.props.frontmatter.author.id;
const author = await getEntry("author", authorId);
if (!author) throw new Error("Undefined author");

const escapeURLs = (text: string) => {
    // URLのドットをスペースとドットに置換する。国際化TLDではTLDにハイフンが含まれることに注意
    const URLs = text.match(/([a-zA-Z0-9\-]+\.)+[a-zA-Z][a-zA-Z0-9\-]+/g);
    if (!URLs) return text;

    for (const URL of URLs) {
        text = text.replace(URL, URL.replace(/\./g, " ."));
    }

    return text;
};

const escapeMentions = (text: string) => {
    // メンションをスペースと@に置換する
    const mentions = text.match(/@[a-zA-Z0-9_]+/g);
    if (!mentions) return text;

    for (const mention of mentions) {
        text = text.replace(mention, mention.replace(/@/g, "@ "));
    }

    return text;
};

const escapeTitle = (title: string) => {
    return escapeMentions(escapeURLs(title));
};

const titleWithSiteName = escapeTitle(`${Astro.props.frontmatter.title} - ${import.meta.env.SITE_NAME}`);

const schema = JSON.stringify({
    "@context": "https://schema.org",
    "@graph": [
        {
            "@type": "Organization",
            "@id": `${Astro.site}#organization`,
            name: import.meta.env.SITE_NAME,
            url: `${Astro.site}`,
            logo: {
                "@type": "ImageObject",
                "@id": `${Astro.site}#logo`,
                url: `${Astro.site}favicon.svg`,
                caption: import.meta.env.SITE_NAME
            },
            image: {
                "@id": `${Astro.site}#logo`
            }
        },
        {
            "@type": "WebSite",
            "@id": `${Astro.site}#website`,
            url: Astro.site,
            name: import.meta.env.SITE_NAME,
            alternateName: ["ろぼいん", "roboin.io"],
            publisher: {
                "@id": `${Astro.site}#organization`
            }
        },
        {
            "@type": "WebPage",
            "@id": `${Astro.url}#webpage`,
            url: Astro.url,
            name: titleWithSiteName,
            isPartOf: {
                "@id": `${Astro.site}#website`
            },
            image: {
                "@type": "ImageObject",
                "@id": `${Astro.url}#primaryimage`,
                url: thumbnailUrl
            },
            primaryImageOfPage: {
                "@id": `${Astro.url}#primaryimage`
            },
            datePublished: Astro.props.frontmatter.pubDate,
            dateModified: Astro.props.frontmatter.modifiedDate || Astro.props.frontmatter.pubDate,
            description: Astro.props.frontmatter.description
        },
        {
            "@type": "Article",
            "@id": `${Astro.url}#article`,
            isPartOf: {
                "@id": `${Astro.url}#webpage`
            },
            author: {
                "@type": author.data.type,
                name: author.data.name,
                url: author.data.homePage,
                sameAs: author.data.sameAs
            },
            publisher: {
                "@id": `${Astro.site}#organization`
            },
            headline: titleWithSiteName,
            datePublished: Astro.props.frontmatter.pubDate,
            dateModified: Astro.props.frontmatter.modifiedDate || Astro.props.frontmatter.pubDate,
            mainEntityOfPage: `${Astro.url}#webpage`,
            image: {
                "@id": `${Astro.url}#primaryimage`
            }
        },
        {
            "@type": author.data.type,
            name: author.data.name,
            url: author.data.homePage,
            sameAs: author.data.sameAs
        }
    ]
});

const getThumbnailData = async () => {
    const thumbnail = Astro.props.frontmatter.thumbnail;

    if (!(Astro.props.frontmatter.showThumbnail && thumbnail)) {
        return {
            showThumbnail: false
        } as const;
    }

    const sources = ["avif", "webp"].map(async (format) => {
        const image = await getImage({
            src: thumbnail,
            format: format,
            width: Math.min(1920, thumbnail.width)
        });

        return {
            srcset: image.src,
            type: `image/${format}`
        } as const;
    });

    const fallbackType = ["gif", "svg", "jpg", "jpeg"].includes(thumbnail.format) ? thumbnail.format : "png";

    const fallback = await getImage({
        src: thumbnail,
        format: fallbackType,
        width: Math.min(1920, thumbnail.width)
    });

    return {
        showThumbnail: true,
        sources: await Promise.all(sources),
        fallback: {
            src: fallback.src,
            attributes: fallback.attributes
        }
    } as const;
};

const thumbnailData = await getThumbnailData();

const ISO8601ToLocale = (iso8601: string) => {
    return iso8601
        .replace("T", " ")
        .replace(/[\+\-]\d{2}:\d{2}/, "")
        .replace(/(\d{2,4})\-(\d{1,2})\-(\d{1,2})/, "$1年$2月$3日")
        .replace(/(\d{2}:\d{2}):\d{2}/, "$1")
        .replace(/\.\d+$/, "");
};
---

<!doctype html>
<html lang="ja">
    <head prefix="og: http://ogp.me/ns#">
        {Astro.props.frontmatter.showAds && <ins data-ad-code-slot="head" />}
        <script type="text/javascript" src="https://adsby.2bet.co.jp/roboinhead.js" is:inline></script>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        {
            thumbnailData.showThumbnail && (
                <link
                    rel="preload"
                    href={thumbnailData.sources[0].srcset}
                    as="image"
                    type={thumbnailData.sources[0].type}
                />
            )
        }
        <link rel="icon" href="/favicon.svg" sizes="any" type="image/svg+xml" />
        <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
        <link
            rel="alternate"
            type="application/rss+xml"
            title={`${import.meta.env.SITE_NAME} RSS Feed`}
            href={`${Astro.site}rss.xml`}
        />
        <link rel="sitemap" href="/sitemap-index.xml" />
        <meta name="apple-mobile-web-app-title" content={import.meta.env.SITE_NAME} />
        <meta name="application-name" content={import.meta.env.SITE_NAME} />
        <meta name="theme-color" content="#ffffff" />
        <title>{`${Astro.props.frontmatter.title} - ${import.meta.env.SITE_NAME}`}</title>
        <meta name="author" content={author.data.name} />
        <meta name="description" content={Astro.props.frontmatter.description} />
        <link rel="canonical" href={Astro.url} />
        <link rel="me" href="https://mstdn.jp/@keita_roboin" />
        <link rel="me" href="https://misskey.io/@roboin" />
        {author.data.fediverseCreator && <meta name="fediverse:creator" content={author.data.fediverseCreator} />}
        <meta property="og:url" content={Astro.url} />
        <meta property="og:type" content={Astro.url.pathname === "/" ? "website" : "article"} />
        <meta property="og:title" content={titleWithSiteName} />
        <meta property="og:description" content={Astro.props.frontmatter.description} />
        <meta property="og:site_name" content={import.meta.env.SITE_NAME} />
        <meta property="og:image" content={thumbnailUrl} />
        <meta name="twitter:card" content="summary" />
        {author.data.twitterSite && <meta name="twitter:site" content={author.data.twitterSite} />}
        <script is:inline type="application/ld+json" set:html={schema} />
        <!-- Google tag (gtag.js) -->
        <script is:inline async src="https://www.googletagmanager.com/gtag/js?id=G-7HZY93W2BY"></script>
        {
            Astro.props.frontmatter.showAds && (
                <script
                    is:inline
                    async
                    src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-2526648882773973"
                    crossorigin="anonymous"
                />
            )
        }
        <script is:inline>
            window.dataLayer = window.dataLayer || [];
            function gtag() {
                dataLayer.push(arguments);
            }
            gtag("js", new Date());

            gtag("config", "G-7HZY93W2BY");

            (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
    </head>
    <body>
        <ins data-ad-code-slot="body"></ins>
        {cache("header", () => <Header />)}
        <main>
            <article>
                {
                    cache("breakingNewsBanner", () => (
                        <BreakingNewsBanner
                            title="【注目ニュース】X（Twitter）でGrokの学習をオフにする方法　Grokでスマホが熱くなるって本当？"
                            url="/article/2024/08/05/how-to-prevent-your-content-from-being-learned-by-grok/"
                            type="info"
                        />
                    ))
                }
                {
                    Astro.props.frontmatter.showAds && (
                        // ↓記事のトップに表示する広告。スマホ専用
                        <div id="top_ad_mobile">
                            <ins
                                class="adsbygoogle"
                                data-ad-client="ca-pub-2526648882773973"
                                data-ad-slot="1835222588"
                                data-ad-format="horizontal"
                                data-full-width-responsive="false"
                                style="height: 100px;"
                            />
                            <script is:inline>(adsbygoogle = window.adsbygoogle || []).push({});</script>
                        </div>
                    )
                }
                <h1><Markdown.Inline of={Astro.props.frontmatter.title} /></h1>
                <div id="article_tags">
                    {
                        !!tags.length &&
                            tags.map((tag) => {
                                if (!tag) return;
                                return <a href={`/tag/${tag.id}/`}>#{tag.data.name}</a>;
                            })
                    }
                </div>
                <div id="article_info">
                    {
                        Astro.props.frontmatter.showDate && (
                            <span>
                                投稿日：
                                <time datetime={Astro.props.frontmatter.pubDate}>
                                    {ISO8601ToLocale(Astro.props.frontmatter.pubDate)}
                                </time>
                            </span>
                        )
                    }
                    {
                        Astro.props.frontmatter.showDate && Astro.props.frontmatter.modifiedDate && (
                            <span>
                                更新日：
                                <time datetime={Astro.props.frontmatter.modifiedDate}>
                                    {ISO8601ToLocale(Astro.props.frontmatter.modifiedDate)}
                                </time>
                            </span>
                        )
                    }
                </div>
                {
                    thumbnailData.showThumbnail && (
                        <figure id="page_top_thumbnail">
                            <picture id="">
                                {thumbnailData.sources.map((source) => {
                                    return <source srcset={source.srcset} type={source.type} />;
                                })}
                                {
                                    // Firefoxでは問題ないが、Chromeでレイアウトシフトが発生するのを防ぐため、img要素にstyle属性を追加
                                }
                                <img
                                    src={thumbnailData.fallback.src}
                                    alt="サムネイル"
                                    loading="eager"
                                    style="width: 100%; height: auto; max-height: none;"
                                    {...thumbnailData.fallback.attributes}
                                />
                            </picture>
                            {Astro.props.frontmatter.thumbnailCaption && (
                                <figcaption>
                                    <Markdown.Inline of={Astro.props.frontmatter.thumbnailCaption} />
                                </figcaption>
                            )}
                        </figure>
                    )
                }
                <slot />
            </article>
            <ShareButton title={titleWithSiteName} url={Astro.url.href} />
            {Astro.props.frontmatter.showAuthor && cache(`authorInfo-${author.id}`, () => <AuthorInfo {author} />)}
            <ins data-ad-code-slot="bottom"></ins>
            {
                Astro.props.frontmatter.showRecommendedArticles && (
                    <>
                        <section class="recommended_articles_section" id="related_articles_section">
                            {/* ↓関連記事の上に表示する広告。PC専用 */}
                            <ins
                                id="top_ad_desktop"
                                class="adsbygoogle"
                                data-ad-client="ca-pub-2526648882773973"
                                data-ad-slot="1755549071"
                                data-ad-format="rectangle, horizontal"
                                data-full-width-responsive="false"
                            />
                            <script is:inline>(adsbygoogle = window.adsbygoogle || []).push({});</script>
                            {Astro.props.slug && <RelatedArticles targetArticleSlug={Astro.props.slug} />}
                            <ins
                                id="middle_ad"
                                class="adsbygoogle"
                                style="display:block"
                                data-ad-client="ca-pub-2526648882773973"
                                data-ad-slot="5941904776"
                                data-ad-format="rectangle, horizontal"
                                data-full-width-responsive="false"
                            />
                            <script is:inline>(adsbygoogle = window.adsbygoogle || []).push({});</script>
                            <ins
                                id="middle_ad"
                                class="adsbygoogle"
                                style="display:block"
                                data-ad-client="ca-pub-2526648882773973"
                                data-ad-slot="5941904776"
                                data-ad-format="rectangle, horizontal"
                                data-full-width-responsive="false"
                            />
                            <script is:inline>(adsbygoogle = window.adsbygoogle || []).push({});</script>
                            {cache("featuredArticles", () => (
                                <FeaturedArticles />
                            ))}
                            <ins data-ad-code-slot="sidebar" />
                        </section>
                        {Astro.props.slug &&
                            cache("latestArticles", () => (
                                <section class="recommended_articles_section">
                                    {/* @ts-expect-error */}
                                    <LatestArticles currentPageSlug={Astro.props.slug} />
                                </section>
                            ))}
                    </>
                )
            }
        </main>
        {cache("footer", () => <Footer />)}
        <script src="./Layout.ts"></script>
    </body>
</html>
